/*
	정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지이다.
	1. X가 3으로 나누어 떨어지면 3으로 나눈다.
	2. X가 2로 나누어 떨어지면 2로 나눈다.
	3. 1을 뺀다.

	정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다.
	연산을 사용하는 횟수의 최솟값을 출력하시오.

	input	: N ( 1 <= N <= 1,000,000)
	output	: 연산을 하는 횟수의 최솟값을 출력한다.

	풀이:
		f(N) =
			아래 셋 중의 가장 작은 수( 결정 될 수 없는 경우는 case에서 제외 )
			1 + f(N/3)
			1 + f(N/2)
			1 + f(N-1)
	1 부터 10^6 까지 만들자
	int [1000000]  == 4MB 이므로 메모리에도 큰 무리가 가지않는다.
*/

#include<iostream>

#define BIG_NUM 1000000
using namespace std;
/////////////////////////////////////////////////////////////////////
int op_cnt[1000001];
///////////////////////////////////////////////////////////////////////
int function(int N) {
	int min = BIG_NUM;

	if(N%3 == 0) 
		if( 1+op_cnt[N/3] < min ) 	min = 1+op_cnt[N/3];
	if(N%2 == 0) 
		if( 1+op_cnt[N/2] < min )	min = 1+op_cnt[N/2];	

	if( 1+op_cnt[N-1] < min )
		min = 1+op_cnt[N-1];

	return min;
}
void mk_op_cnt() {
	op_cnt[1] = 0;
	for(int i=2; i<=1000000; ++i) {
		op_cnt[i] = function(i);
	}
}
////////////////////////////////////////////////////////////////////////////
int main() {
	int N;
	mk_op_cnt();
	cin >> N;
	cout << op_cnt[N] << endl;
	return 0;
}

